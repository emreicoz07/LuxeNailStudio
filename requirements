Professional Nail Studio Web Application

Objective:
Develop a modern, responsive Professional Nail Studio Web Application with a candy pink color theme that allows users to book appointments, browse services, and showcase past work.

Platforms:

Web (Primary)
Mobile (Optional - React Native)
Admin Dashboard for management
Technology Stack & Development Guidelines
Backend (API & Server)
Language: TypeScript
Framework: Nest.js (Recommended) or Express.js
Linting & Formatting: ESLint & Prettier for consistent code quality
Database: PostgreSQL (preferred) or MongoDB
ORM: Prisma ORM (Recommended) or TypeORM/Mongoose
Authentication: JWT-based authentication
Data Validation: Validate request bodies using Zod or Joi
Error Handling: Implement proper exception handling & logging
API Documentation: Use Swagger for documentation
Environment Variables: Manage with dotenv
Testing:
Unit Testing (Jest)
Integration Testing
API Testing with Postman or Supertest
Performance Optimization:
Use caching (Redis or similar)
Optimize database queries
Implement rate limiting (Express Rate Limit)
Folder Structure (Backend)

/controllers ‚Üí Handle business logic
/routes ‚Üí Define API endpoints
/middlewares ‚Üí Authentication, logging, error handling
/services ‚Üí Business logic and database interactions
/models ‚Üí Define database schemas
/utils ‚Üí Helper functions
/config ‚Üí Configuration files
/tests ‚Üí Unit and integration tests
Frontend (Web Application)
Framework: React with TypeScript
State Management: Redux Toolkit
UI Library: Tailwind CSS or Styled Components
Routing: React Router
Form Handling: React Hook Form with Yup validation
API Requests: Axios for API calls
Code Quality: Use ESLint & Prettier
Performance Optimization:
Lazy Loading (React Suspense)
Memoization with useMemo
Optimized re-renders with useCallback
Folder Structure (Frontend)

/components ‚Üí Reusable UI components
/pages ‚Üí Different application views (Home, Booking, Services, etc.)
/store ‚Üí Redux slices for state management
/hooks ‚Üí Custom hooks
/assets ‚Üí Images, icons, and styles
/utils ‚Üí Helper functions
/config ‚Üí Configuration settings
/tests ‚Üí Jest and React Testing Library tests
Mobile (Optional)
Framework: React Native with TypeScript
Navigation: React Navigation
State Management: Redux Toolkit
API Requests: Axios
UI Library: NativeBase or React Native Paper
Folder Structure (Mobile)

/components ‚Üí Reusable UI elements
/screens ‚Üí Mobile application screens
/store ‚Üí Redux slices for state management
/hooks ‚Üí Custom hooks for mobile
/assets ‚Üí Icons and images
/utils ‚Üí Helper functions
/config ‚Üí App configuration
/tests ‚Üí Mobile-specific unit tests
UI/UX Requirements
Primary Color Theme: Candy Pink üéÄ
Design Consistency: All pages must follow the same theme and typography
Mobile-Responsive: The UI should be fully responsive on different devices
Smooth Animations: Use Framer Motion for subtle animations
Accessibility: Ensure proper contrast, font sizes, and keyboard navigation
Website Pages
1Ô∏è‚É£ Home Page üè† ‚Üí Showcase services, promotions, and hero section
2Ô∏è‚É£ Booking Page üìÖ ‚Üí Users can schedule appointments
3Ô∏è‚É£ Services Page üíÖ ‚Üí Display available nail services
4Ô∏è‚É£ Gallery Page üì∏ ‚Üí Showcase previous work (images, client testimonials)
5Ô∏è‚É£ About Us Page üìñ ‚Üí Provide business details & team info
6Ô∏è‚É£ Contact Page üìû ‚Üí Contact form & social media links

Expected Features
‚úÖ User Authentication: Sign up, login, logout (JWT-based)
‚úÖ Admin Dashboard: Manage appointments & services
‚úÖ Booking System: Users can select date, time & service
‚úÖ Payment Integration: (Optional) Stripe or PayPal for pre-payments
‚úÖ Email Notifications: Send confirmation emails for bookings
‚úÖ Social Media Integration: Embed Instagram feed & add social media links
‚úÖ SEO Optimization: Meta tags & structured data for search engine ranking
‚úÖ Performance Optimization: Lazy loading, caching, optimized API calls
‚úÖ Testing: Ensure 90%+ test coverage for critical features

Deployment & CI/CD
‚úÖ Backend Deployment: Docker & Kubernetes (Optional)
‚úÖ Frontend Deployment: Vercel, Netlify, or AWS
‚úÖ Database Hosting: Railway, Supabase, or AWS RDS
‚úÖ CI/CD Pipeline:

GitHub Actions for automated testing & deployment
Linting & Testing before merge
Dockerized Containers for production
Development Workflow
1Ô∏è‚É£ Setup Backend: Initialize Nest.js/Express, set up database, and define API endpoints
2Ô∏è‚É£ Setup Frontend: Configure React, Redux, Tailwind, and API integrations
3Ô∏è‚É£ Develop Core Features: Implement authentication, booking system, and admin dashboard
4Ô∏è‚É£ Design & UI Enhancements: Ensure pixel-perfect UI with animations and responsiveness
5Ô∏è‚É£ Testing & Optimization: Write unit tests, fix bugs, and optimize performance
6Ô∏è‚É£ Deploy & Launch: Set up CI/CD pipelines and deploy to production

Additional Requirements
‚úÖ Code Documentation: Use JSDoc and inline comments
‚úÖ Error Monitoring: Integrate Sentry for tracking errors
‚úÖ Analytics: Google Analytics for tracking user behavior
‚úÖ Push Notifications (Optional): Send reminders for bookings

Summary of Requirements
Category	Requirement
Backend	TypeScript, Nest.js/Express, PostgreSQL, Prisma ORM
Frontend	React, Redux Toolkit, Tailwind CSS, Axios
Mobile (Optional)	React Native, Redux Toolkit, React Navigation
Authentication	JWT-based, Secure Login
Booking System	Select date, time & service
Admin Dashboard	Manage bookings, services, and users
Payments	(Optional) Stripe or PayPal integration
SEO & Performance	Lazy loading, caching, optimized API calls
Testing	Jest, Integration Tests, API Tests
Deployment	CI/CD, Docker, Vercel/Netlify, AWS RDS

REGISTER : DESIGN
You are a professional web application designed for a nail studio. Your goal is to create a seamless and user-friendly registration process. 

Ask the user for the following details in a clear and engaging manner:

1Ô∏è‚É£ **Full Name** - "Please enter your full name."  
   - Must be between 2 and 50 characters  
   - Only letters allowed  

2Ô∏è‚É£ **Email Address** - "Please enter your email address (e.g., name@example.com)."  
   - Must be a valid email format  
   - Should not be already registered  

3Ô∏è‚É£ **Phone Number (Optional)** - "Would you like to receive appointment updates? Please enter your phone number (e.g., +1 555 555 5555)."  
   - If provided, it must be a valid phone number  

4Ô∏è‚É£ **Password** - "Create a secure password (at least 8 characters, including one uppercase letter, one lowercase letter, and one special character)."  
   - Minimum 8 characters  
   - Must contain at least one uppercase letter, one lowercase letter, and one special character  

5Ô∏è‚É£ **Confirm Password** - "Please confirm your password by entering it again."  
   - Must match the previously entered password  

6Ô∏è‚É£ **Subscribe to nail care tips and promotions (Optional)**  
   - "Would you like to receive exclusive nail care tips and promotions?"  
   - Options: "Yes, sign me up!" or "No, thanks."  

7Ô∏è‚É£ **Terms & Conditions Agreement (Mandatory)**  
   - "To continue, please confirm that you agree to our [Terms & Conditions](#)."  
   - The user must accept this before proceeding.  

Ensure proper input validation and provide friendly error messages if necessary. Guide the user through a smooth and responsive registration process.  

REGISTER : BACKEND AND FRONTEND

You are an expert AI developer responsible for creating a **seamless user registration system** for a **Professional Nail Studio Web Application**. Your task is to **design and implement both backend and frontend** functionalities to ensure a **secure, efficient, and scalable registration process**.

---
## üõ† **Project Specifications**
- **Frontend:** React (TypeScript), Redux Toolkit, Tailwind CSS, Axios
- **Backend:** Nest.js (TypeScript), MongoDB (Mongoose), Prisma ORM
- **Authentication:** JWT-based authentication
- **Validation:** Zod or Joi for backend, React Hook Form with Yup for frontend
- **Testing:** Jest for unit tests, Supertest for API tests

---
## üìå **User Registration Requirements**
Create a **fully functional user registration system** with the following fields:

1Ô∏è‚É£ **Full Name**  
   - Required: ‚úÖ Yes  
   - Validation: Must be between **2 and 50 characters**  
   - Error message: `"Full name must be between 2 and 50 characters and contain only letters."`

2Ô∏è‚É£ **Email Address**  
   - Required: ‚úÖ Yes  
   - Validation: Must be a valid **email format** (e.g., `user@example.com`)  
   - Check for uniqueness in **MongoDB**  
   - Error message: `"Please enter a valid and unique email address."`

3Ô∏è‚É£ **Phone Number (Optional)**  
   - Required: ‚ùå No (Optional)  
   - Validation: If provided, must match **international phone format** (e.g., `+1 555 555 5555`)  
   - Error message: `"Please enter a valid phone number."`

4Ô∏è‚É£ **Password**  
   - Required: ‚úÖ Yes  
   - Validation:  
     - **Minimum 8 characters**  
     - Must contain **one uppercase letter, one lowercase letter, one special character**  
   - Hash password using **bcrypt** before storing in MongoDB  
   - Error message: `"Password must be at least 8 characters and include an uppercase letter, a lowercase letter, and a special character."`

5Ô∏è‚É£ **Confirm Password**  
   - Required: ‚úÖ Yes  
   - Validation: Must match the previously entered password  
   - Error message: `"Passwords do not match."`

6Ô∏è‚É£ **Subscribe to Nail Care Tips and Promotions (Optional)**  
   - Required: ‚ùå No  
   - Options:  
     - ‚úÖ `"Yes, sign me up!"`  
     - ‚ùå `"No, thanks."`

7Ô∏è‚É£ **Terms & Conditions Agreement**  
   - Required: ‚úÖ Yes  
   - Validation: Must be **checked** before proceeding  
   - Error message: `"You must agree to the Terms & Conditions before registering."`

---
## üöÄ **Backend Implementation (Nest.js & MongoDB)**
- **Create a REST API `/auth/register` endpoint**
- **Use Mongoose schemas with Zod for validation**
- **Encrypt passwords with bcrypt before storing**
- **Generate JWT token upon successful registration**
- **Send verification email (Optional)**
- **Log all user registration attempts using Winston Logger**

---
## üé® **Frontend Implementation (React & Tailwind)**
- **Use React Hook Form & Yup for validation**
- **Show real-time input validation errors**
- **Use Axios for API calls**
- **Store JWT token in HttpOnly cookies**
- **Implement a loading state for API requests**
- **Ensure the form is fully responsive**
- **Include success/error notifications using Toasts**

---
## üîç **Testing & Security**
- **Unit Tests:** Write Jest tests for API controllers & services  
- **Integration Tests:** Use Supertest to validate API responses  
- **Rate Limiting:** Implement Express Rate Limit to prevent spam registrations  
- **Error Handling:** Ensure proper exception handling with custom error messages  
- **Security:** Prevent **XSS**, **SQL Injection**, and **Brute Force Attacks**  

---
## ‚úÖ **Final Deliverables**
- **A fully functional and responsive registration form**
- **Secure authentication system using JWT**
- **Well-documented API with Swagger**
- **100% test coverage for registration process**
- **Deployment-ready backend and frontend code**